services:
  # PostgreSQL資料庫
  postgres:
    image: postgres:15
    container_name: paper_analysis_db
    environment:
      POSTGRES_DB: paper_analysis
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  # FastAPI後端
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: paper_analysis_backend
    ports:
      - "8001:8000"  # 避免與split_sentences衝突
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=paper_analysis
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - GROBID_URL=http://140.115.126.192:8070
      - N8N_BASE_URL=https://n8n.hsueh.tw
      - SPLIT_SENTENCES_URL=http://split_sentences:8000
    volumes:
      - ./backend:/app/backend
      - ./temp_files:/app/temp_files
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network

  # React前端 (開發模式)
  # react-dev:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.dev
  #   container_name: react-frontend-dev
  #   ports:
  #     - "5173:5173"
  #   volumes:
  #     - .:/app
  #     - /app/node_modules
  #   environment:
  #     - NODE_ENV=development
  #     - VITE_API_BASE_URL=http://localhost:8001/api
  #   depends_on:
  #     - backend
  #   networks:
  #     - app-network

  # React frontend service (production build)
  react:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: react-frontend
    ports:
      - "80:80"
    environment:
      - NODE_ENV=production
      - VITE_API_URL=http://localhost:8001
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - app-network

  # Split Sentences API service (保留現有)
  split_sentences:
    build:
      context: ./split_sentences
      dockerfile: Dockerfile
    container_name: pdf-sentence-splitter
    ports:
      - "8000:8000"
    volumes:
      - ./split_sentences/app:/app/app
      - ./split_sentences/upload_data:/app/upload_data
    restart: unless-stopped
    environment:
      - PYTHONUNBUFFERED=1
      - MAX_WORKERS=1
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - redis
    networks:
      - app-network

  # Redis service (required by split_sentences)
  redis:
    image: redis:alpine
    container_name: pdf-splitter-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - app-network

volumes:
  postgres_data:
  redis_data:

networks:
  app-network:
    driver: bridge
